[{"/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/index.js":"1","/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/App.js":"2","/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/reportWebVitals.js":"3","/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/map_view/Map.js":"4","/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/config.js":"5","/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/map_view/countries.js":"6"},{"size":500,"mtime":1609592278658,"results":"7","hashOfConfig":"8"},{"size":170,"mtime":1612275069398,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1610297273368,"results":"10","hashOfConfig":"8"},{"size":13330,"mtime":1612805878837,"results":"11","hashOfConfig":"8"},{"size":283,"mtime":1612285905217,"results":"12","hashOfConfig":"8"},{"size":26768,"mtime":1609609829187,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1ampg3t",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"16"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/index.js",[],["29","30"],"/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/App.js",[],"/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/reportWebVitals.js",[],"/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/map_view/Map.js",["31","32","33","34","35","36"],"import React, { Component } from \"react\"\nimport axios from 'axios'\n\n/* Bootstrap components */\nimport {\n\tModal, Button\n} from 'react-bootstrap'\n\n/* All local dependencies */\nimport config from \"../config\"\nimport countries from './countries'\n\n/* Bootstrap + CSS */\nimport \"./css/main.css\"\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n/* Import all OpenLayer dependencies */\nimport \"ol/ol.css\"\nimport BingMaps from \"ol/source/BingMaps\"\nimport Map from \"ol/Map\"\nimport TileLayer from \"ol/layer/Tile\"\nimport View from \"ol/View\"\nimport {fromLonLat, toLonLat} from \"ol/proj\"\n\nclass MapView extends Component {\n\tconstructor(props){\n\t\t// inside props we store \n\t\t// - _styles : map styles for display\n\t\t// - _layers : layers for each style\n\t\t// - _view   : the view for each layer\n\t\t// - map     : the canvas to draw the map\n\t\tsuper(props)\n\t\tthis.countries = countries\n\n\t\t// define the states, store the following info :\n\t\t// - _long : the current center longtitude of the map\n\t\t// - _lat  : the current center latitude of the map\n\t\tthis.state = {\n\t\t\t_long : config['default_long'],\n\t\t\t_lat  : config['default_lat'],\n\t\t\t_search_long : config['default_long'],\n\t\t\t_search_lat : config['default_lat'],\n\t\t\t_show_model_dialog : false,\n\t\t\t_show_map_dialog : false,\n\t\t\tmodels : [],\t\n\t\t\tcurrent_map_url : ''\n\t\t}\n\n\t\tthis.render = this.render.bind(this)\n\t\tthis.componentDidMount = this.componentDidMount.bind(this)\n\n\t\t/* Event handlers */\n\t\tthis.onChange = this.onChange.bind(this)\n\t\tthis.onCountryChange = this.onCountryChange.bind(this)\n\t\tthis.onCoordChange = this.onCoordChange.bind(this)\n\t\tthis.onSearchCoords = this.onSearchCoords.bind(this)\n\t\tthis.onLongLatChange = this.onLongLatChange.bind(this)\n\t\tthis.onDefaultCoords = this.onDefaultCoords.bind(this)\n\t\tthis.handleHideMapDialog = this.handleHideMapDialog.bind(this)\n\n\t\t/* Util functions */\n\t\tthis.showModelsDialog = this.showModelsDialog.bind(this)\n\t\tthis.setModelsList = this.setModelsList.bind(this)\n\t\tthis.onModelSelected = this.onModelSelected.bind(this)\n\t\tthis.exportToImage = this.exportToImage.bind(this)\n\t\tthis.getImageURL = this.getImageURL.bind(this)\n\t\tthis.sendCanvasToServer = this.sendCanvasToServer.bind(this)\n\t}\n\n\tcomponentDidMount(){\n\t\t// Config all layers of OpenLayer\n\t\tthis._styles = [\n\t\t  'Aerial',\n\t\t  'AerialWithLabelsOnDemand',\n\t\t  'RoadOnDemand',\n\t\t  'CanvasDark',\n\t\t];\n\t\t\n\t\tthis._layers = [];\n\t\tvar _i, _ii;\n\t\tfor (_i = 0, _ii = this._styles.length; _i < _ii; ++_i) {\n\t\t  this._layers.push(\n\t\t\tnew TileLayer({\n\t\t\t  visible: false,\n\t\t\t  preload: Infinity,\n\t\t\t  source: new BingMaps({\n\t\t\t\tkey: config['bing_map_api_key'],\n\t\t\t\timagerySet: this._styles[_i],\n\t\t\t\t// use maxZoom 19 to see stretched tiles instead of the BingMaps\n\t\t\t\t// \"no photos at this zoom level\" tiles\n\t\t\t\t// maxZoom: 19\n\t\t\t  }),\n\t\t\t})\n\t\t  );\n\t\t}\n\n\t\t// long-lat coordinates\n\t\tvar washingtonLonLat = [this.state._long, this.state._lat] // Singapore default coordinate\n\t\tvar washingtonWebMercator = fromLonLat(washingtonLonLat);\n\n\t\tthis._view = new View({\n\t\t\tprojection : config['map_projection_system'],\n\t\t\tcenter : washingtonWebMercator,\n\t\t\tzoom : 13\n\t\t})\n\n\t\t// Make _long & _lat update on change \n\t\tthis._view.on('change:center', this.onCoordChange);\n\n\t\tthis.map = new Map({\n\t\t\tlayers : this._layers,\n\t\t\ttarget : 'map',\n\t\t\tview : this._view\n\t\t})\n\n\t\t// Make AerialWithLabelsOnDemand visible by default\n\t\tthis._layers[1].setVisible(true)\n\n\t\t// Get existing models\n\t\taxios({\n\t\t\turl : `http://${config['compute_server_ip']}:${config['compute_server_port']}/get_models_list`,\n\t\t\tmethod : 'POST',\n\t\t\theaders : {\n\t\t\t\t'Content-Type' : 'multipart/form-data'\n\t\t\t}\n\t\t}).then(response => response.data)\n\t\t.then(response => this.setModelsList(response))\n\t\t.catch(err => console.log(err))\n\t}\n\n\n\t/* --Event handlers-- */\n\tonCoordChange() {\n\t\t//var current_coord = [this._view.center[0], this._view.center[1]]\n\t\tvar current_long_lat = toLonLat(this._view.getCenter())\n\n\t\t// console.log(this._view.center)\n\t\tthis.setState({_long : current_long_lat[0].toFixed(4)})\n\t\tthis.setState({_lat  : current_long_lat[1].toFixed(4)})\n\t}\n\n\tonChange(e) {\n\t\tvar style = e.target.value;\n\t\tfor (var i = 0, ii = this._layers.length; i < ii; ++i) {\n\t\t\tthis._layers[i].setVisible(this._styles[i] === style);\n\t\t}\n\t}\n\n\tonCountryChange(e){\n\t\tvar country_id = e.target.value\n\t\tvar country_lon = this.countries[country_id].longitude\n\t\tvar country_lat = this.countries[country_id].latitude\n\n\t\tthis.setState({_search_long : country_lon})\n\t\tthis.setState({_search_lat : country_lat})\n\t}\n\n\tonSearchCoords(e) {\n\t\t var _search_long = this.state._search_long\n\t\t var _search_lat  = this.state._search_lat\n\n\t\t var center_lonlat = [_search_long, _search_lat]\n\t\t var coords = fromLonLat(center_lonlat)\n\n\t\t this._view.setCenter(coords)\n\t}\n\n\tonDefaultCoords() {\n\t\tvar center_lonlat = [config['default_long'], config['default_lat']]\n\t\tvar coords = fromLonLat(center_lonlat)\n\n\t\tthis._view.setCenter(coords)\n\t}\n\n\tonLongLatChange(e) {\n\t\tthis.setState({[e.target.name] : e.target.value})\n\t}\n\n\tsendCanvasToServer(canvas) {\n\t\tvar dataURL = canvas.toDataURL().split(\",\")[1]\n\t\tvar blobBin = atob(dataURL)\n\n\t\tvar array = []\n\t\tfor (var i = 0; i < blobBin.length; i++){\n\t\t\tarray.push(blobBin.charCodeAt(i))\n\t\t}\n\n\t\tvar blob = new Blob([new Uint8Array(array)], {type : 'img/jpg'})\n\t\tvar formData = new FormData()\n\t\tvar current_model = document.getElementById('model-selection').value \n\t\tvar model_code = current_model.split('-')[0].trim()\n\n\t\tformData.append('image', blob)\n\t\tformData.append('model', model_code)\n\t\tconsole.log(model_code)\n\n\n\t\t// send data to server\n\t\taxios({\n\t\t\turl : `http://${config['compute_server_ip']}:${config['compute_server_port']}/upload_and_process`,\n\t\t\tmethod : 'POST',\n\t\t\tdata : formData,\n\t\t\theaders : {\n\t\t\t\t'Content-Type' : 'multipart/form-data'\n\t\t\t}\n\t\t}).then(response => response.data)\n\t\t.then(response => {\n\t\t\tthis.setState({_show_map_dialog : true})\n\t\t\tthis.setState({current_map_url : `http://${config['compute_server_ip']}:${config['compute_server_port']}/${response}`})\n\t\t})\n\t\t.catch(err => console.log(err))\n\t}\n\n\t/* --Util functions-- */\n\texportToImage() {\n\t\tthis.map.once('rendercomplete', this.getImageURL)\n\t  \tthis.map.renderSync();\n\t}\n\n\tgetImageURL() {\n\t\tvar mapCanvas = document.createElement('canvas');\n\t    var size = this.map.getSize();\n\t    mapCanvas.width = size[0];\n\t    mapCanvas.height = size[1];\n\t    var mapContext = mapCanvas.getContext('2d');\n\t    Array.prototype.forEach.call(\n\t      document.querySelectorAll('.ol-layer canvas'),\n\t      function (canvas) {\n\t        if (canvas.width > 0) {\n\t          var opacity = canvas.parentNode.style.opacity;\n\t          mapContext.globalAlpha = opacity === '' ? 1 : Number(opacity);\n\t          var transform = canvas.style.transform;\n\t          // Get the transform parameters from the style's transform matrix\n\t          var matrix = transform\n\t            .match(/^matrix\\(([^]*)\\)$/)[1]\n\t            .split(',')\n\t            .map(Number);\n\t          // Apply the transform to the export map context\n\t          CanvasRenderingContext2D.prototype.setTransform.apply(\n\t            mapContext,\n\t            matrix\n\t          );\n\t          mapContext.drawImage(canvas, 0, 0);\n\t        }\n\t      }\n\t    );\n\t    if (navigator.msSaveBlob) {\n\t      // link download attribuute does not work on MS browsers\n\t      navigator.msSaveBlob(mapCanvas.msToBlob(), 'map.png');\n\t      console.log('msSaveBlob')\n\t    } else {\n\t      var link = document.getElementById('image-download');\n\t      \n\t      // first, check if the map view is \"Aerial\"\n\t      if(this._layers[0].values_.visible) { // If Aerial is visible\n\n\t\t    this.sendCanvasToServer(mapCanvas)\n\t\t    // alert('Map data has been forwarded to server ... ')\n\t      }else{\n\t      \talert('Please select the plain \"Aerial\" map view')\n\t      }\n\n\t    }\n\t}\n\n\tshowModelsDialog() {\n\t\tvar export_btn = document.getElementById('export-png')\n\t\tvar layer_select = document.getElementById('layer-select')\n\t\t\n\t\tif(!this.state._show_model_dialog){\n\t\t\texport_btn.innerHTML = 'Search tool'\n\n\t\t\t// change map layer to aerial\n\t\t\tlayer_select.value = 'Aerial'\n\t\t\tfor (var i = 0, ii = this._layers.length; i < ii; ++i) {\n\t\t\t\tthis._layers[i].setVisible(this._styles[i] === layer_select.value);\n\t\t\t}\n\t\t}else{\n\t\t\texport_btn.innerHTML = 'Extract RoadMap'\n\n\t\t\t// change map layer to aerial with label\n\t\t\tlayer_select.value = 'AerialWithLabelsOnDemand'\n\t\t\tfor (var i = 0, ii = this._layers.length; i < ii; ++i) {\n\t\t\t\tthis._layers[i].setVisible(this._styles[i] === layer_select.value);\n\t\t\t}\n\t\t}\n\n\t\tthis.setState({_show_model_dialog : !this.state._show_model_dialog})\n\t}\n\n\thandleHideMapDialog() {\n\t\tthis.setState({_show_map_dialog : false})\n\t\tthis.setState({current_map_url : ''})\n\t}\n\n\tsetModelsList(data){\n\t\tthis.setState({models : data})\n\t} \n\n\tonModelSelected() {\n\t\tvar current_model = document.getElementById('model-selection').value \n\t\tfor(var i = 0; i < this.state.models.length; i++) {\n\t\t\tif(this.state.models[i].name === current_model){\n\t\t\t\tvar latitude = this.state.models[i].latitude\n\t\t\t\tvar longtitude = this.state.models[i].longtitude\n\n\t\t\t\tconsole.log(latitude, longtitude)\n\n\t\t\t\tvar center_lonlat = [longtitude, latitude]\n\t\t\t\tvar coords = fromLonLat(center_lonlat)\n\n\t\t\t\tthis._view.setCenter(coords)\n\t\t\t}\n\t\t}\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<script src=\"https://unpkg.com/elm-pep\"></script>\n\t\t\t\t<div id=\"map\" className=\"map\"></div>\n\n\t\t\t\t<Modal show={this.state._show_map_dialog} backprop=\"static\" keyboard={true} onHide={this.handleHideMapDialog} size=\"lg\">\n\t\t\t\t\t<Modal.Header><h1>Predicted RoadMap</h1></Modal.Header>\n\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t<img src={this.state.current_map_url} height={480} width={640}/>\n\t\t\t\t\t</Modal.Body>\n\t\t\t\t</Modal>\n\n\t\t\t\t<div id=\"utils\">\n\t\t\t\t\t<label for=\"layer-select\">Map Styles</label>\n\t\t\t\t\t<select id=\"layer-select\" onChange={this.onChange} className=\"form-control\">\n\t\t\t\t\t\t<option value=\"Aerial\">Aerial</option>\n\t\t\t\t\t\t<option value=\"AerialWithLabelsOnDemand\" selected>Aerial with labels</option>\n\t\t\t\t\t\t<option value=\"RoadOnDemand\">Road</option>\n\t\t\t\t\t\t<option value=\"CanvasDark\">Road dark</option>\n\t\t\t\t\t</select>\n\n\t\t\t\t\t<div id='coords-info'>\n\t\t\t\t\t\t<h3 className=\"seg-header\">Coordinates info</h3><br/><br/><br/>\n\t\t\t\t\t\t<label for=\"center-lattitude\">Map Lattitude</label>\n\t\t\t\t\t\t<input enabled={false} id='center-lattitude' value={this.state._lat} className='form-control'/>\n\t\t\t\t\t\t<label for=\"center-longtitude\">Map longtitude</label>\n\t\t\t\t\t\t<input enabled={false} id='center-longtitude' value={this.state._long} className='form-control'/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div id='coords-utils' style={{'width':'100%'}}>\n\t\t\t\t\t\t<div id='search-by-coords-region' hidden={this.state._show_model_dialog}>\n\t\t\t\t\t\t\t<h3 className=\"seg-header\">Search By Coordinates</h3><br/><br/><br/>\n\n\t\t\t\t\t\t\t<label for=\"countries-select\">Countries</label><br/>\n\t\t\t\t\t\t\t<select onChange={this.onCountryChange} id=\"countries-select\" className='form-control'>\n\t\t\t\t\t\t\t{this.countries.map((item, index) => {\n\t\t\t\t\t\t\t\tif(item.country === 'SG'){\n\t\t\t\t\t\t\t\t\treturn (<option selected value={index}>{item.name}</option>)\n\t\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t\treturn (<option value={index}>{item.name}</option>)\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t</select>\n\n\t\t\t\t\t\t\t<label for=\"search-center-lattitude\">Lattitude</label>\n\t\t\t\t\t\t\t<input onChange={this.onLongLatChange} value={this.state._search_lat} name='_search_lat' id='search-center-lattitude' className='form-control'/>\n\n\t\t\t\t\t\t\t<label for=\"search-center-longtitude\">longtitude</label>\n\t\t\t\t\t\t\t<input onChange={this.onLongLatChange} value={this.state._search_long} name='_search_long' id='search-center-longtitude' className='form-control'/>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div id='extract-roadmap-region' hidden={!this.state._show_model_dialog} style={{'width':'100%'}}> \n\t\t\t\t\t\t\t<h3 className='seg-header' style={{'float' :'left'}}>Choose one model</h3>\n\t\t\t\t\t\t\t<Modal.Dialog>\n\t\t\t\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t\t\t\t<select id='model-selection'  className=\"form-control\" onChange={this.onModelSelected}>\n\t\t\t\t\t\t\t\t\t\t<option selected=\"\" value=\"0\">Select model</option>\n\t\t\t\t\t\t\t\t\t\t{this.state.models.map((value, index) => {\n\t\t\t\t\t\t\t\t\t\t\treturn (<option value={value['name']}>{value['name']}</option>)\n\t\t\t\t\t\t\t\t\t\t})}\n\t\t\t\t\t\t\t\t\t</select>\n\t\t\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t\t\t<Button onClick={this.exportToImage} style={{'width':'100%'}}>Extract and Download</Button>\n\t\t\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t\t\t<p style={{'font-size':'12px'}}>Each model is associated with a particular city/country, the result might vary when a model\n\t\t\t\t\t\t\t\t\tis used with a city/country different from the recommended one</p>\n\t\t\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t\t\t</Modal.Dialog>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<table style={{'width':'100%'}}>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<td style={{'width':'33.3%'}}><button style={{'width':'100%'}} onClick={this.onSearchCoords} type=\"button\" className='btn btn-primary search-button'>Search</button></td>\n\t\t\t\t\t\t\t\t<td style={{'width':'33.3%'}}><button style={{'width':'100%'}} onClick={this.onDefaultCoords} type=\"button\" className='btn btn-primary search-button'>Default</button></td>\n\t\t\t\t\t\t\t\t<td style={{'width':'33.3%'}}><button style={{'width':'100%'}} id=\"export-png\" class=\"btn btn-primary\" onClick={this.showModelsDialog}><i class=\"fa fa-download\"></i>Extract RoadMap</button></td>\n    \t\t\t\t\t\t</tr>\t\n    \t\t\t\t\t</table>\n    \t\t\t\t\t<a id=\"image-download\" download=\"map.png\"></a>\n\t\t\t\t\t</div>\n\t\t\t\t </div>\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default MapView","/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/config.js",[],"/home/hieu/Desktop/Hieu/Python/other_git/RoadNetDemo/client/src/map_view/countries.js",[],["37","38"],{"ruleId":"39","replacedBy":"40"},{"ruleId":"41","replacedBy":"42"},{"ruleId":"43","severity":1,"message":"44","line":252,"column":12,"nodeType":"45","messageId":"46","endLine":252,"endColumn":16},{"ruleId":"47","severity":1,"message":"48","line":283,"column":13,"nodeType":"45","messageId":"49","endLine":283,"endColumn":14},{"ruleId":"47","severity":1,"message":"50","line":283,"column":20,"nodeType":"45","messageId":"49","endLine":283,"endColumn":22},{"ruleId":"51","severity":1,"message":"52","line":326,"column":7,"nodeType":"53","endLine":326,"endColumn":71},{"ruleId":"54","severity":1,"message":"55","line":396,"column":10,"nodeType":"53","endLine":396,"endColumn":52},{"ruleId":"56","severity":1,"message":"57","line":396,"column":10,"nodeType":"53","endLine":396,"endColumn":52},{"ruleId":"39","replacedBy":"58"},{"ruleId":"41","replacedBy":"59"},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'link' is assigned a value but never used.","Identifier","unusedVar","no-redeclare","'i' is already defined.","redeclared","'ii' is already defined.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md",["60"],["61"],"no-global-assign","no-unsafe-negation"]